{"version":3,"sources":["Bacteria.js","Square.js","Row.js","serviceWorker.js","index.js","App.js"],"names":["Bacteria","props","style","flex","borderRadius","width","height","backgroundColor","textAlign","color","bacteria","payload","defaultProps","Square","styles","params","r","g","b","border","bac","find","locationX","x","locationY","y","onClick","console","log","end","Row","className","display","flexDirection","row","map","item","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","e","D","DIRECTIONS","DIRECTION_INDEXES","name","n","plugIn","equation","eval","trapezoid","length","h1","h2","integrate","a","stepsize","area","i","boardGen","colors","temp","state","squareSize","nSqr","push","setState","RX","getRandomInt","max","Math","floor","random","changeN","RegExp","test","inputN","error","ERRORTEXT","changeQ","q","inputQ","changeBaseRun","baseRun","text","changeReleaseRate","releaseRate","setReleaseOrder","forceReleaseOrder","payloadChange","rx","val","input","notTXorRX","good","forEach","rec","TX","setSquaresAtR","concen","Rx","getDiffusedConcentration","t","Q","PI","sqrt","updateColors","time","createBacteria","directions","released","index","goal","activeBac","filter","dirIndex","start","direction","stateDuration","checkNeighborBacteria","neighbors","randomMove","maxR","maxG","maxB","HofT","bacteriaStep","done","bacReleased","reduce","acc","obj","bitERR","avgTime","lCSUB","newBac","results","output","indexHelper","newX","newY","rgb","newDirection","d","simIteration","simRun","sleep","ms","Promise","resolve","setTimeout","inOut","j","BER","toString","red","redTotal","green","greenTotal","blue","blueTotal","averageTimes","substrings","k","slice","sort","p","includes","throughput","this","marginHorizontal","justifyContent","margin","borderColor","type","placeholder","value","disabled","onChange","target","alignItems","checked","React","Component"],"mappings":"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","file":"static/js/main.8edb2bf2.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Bacteria = props => {\n  return (\n    <div\n      style={{\n        flex: 1,\n        borderRadius: 15,\n        width: 20,\n        height: 20,\n        backgroundColor: \"black\"\n      }}\n    >\n      <p style={{ textAlign: \"center\", color: \"white\" }}>\n        {props.bacteria.payload}\n      </p>\n    </div>\n  );\n};\n\nBacteria.propTypes = { bacteria: PropTypes.object };\n\nBacteria.defaultProps = {};\n\nexport default Bacteria;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport Bacteria from \"./Bacteria\";\n\nfunction Square(props) {\n  const styles = {\n    backgroundColor: `rgb(${props.params.r}, ${props.params.g}, ${props.params.b})`,\n    width: 20,\n    height: 20,\n    border: \".25px solid black\"\n  };\n  const bac = props.bacteria.find(\n    bac => bac.locationX === props.params.x && bac.locationY === props.params.y\n  );\n  return (\n    <div\n      onClick={() =>\n        console.log(\n          `${props.params.x} ${props.params.y} ${props.params.r} ${props.params.g} ${props.params.b}`\n        )\n      }\n      style={styles}\n    >\n      {bac && !bac.end && <Bacteria bacteria={bac} />}\n    </div>\n  );\n}\n\nSquare.propTypes = {\n  params: PropTypes.object,\n  bacteria: PropTypes.arrayOf(PropTypes.object)\n};\n\nSquare.defaultProps = {\n  bacteria: null\n};\nexport default Square;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport Square from \"./Square\";\n\nfunction Row(props) {\n  return (\n    <div className='Row' style={{ display: \"flex\", flexDirection: \"row\" }}>\n      {props.row.map(item => (\n        <Square params={item} bacteria={props.bacteria} />\n      ))}\n    </div>\n  );\n}\n\nRow.propTypes = {\n  bacteria: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nexport default Row;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport { Button } from \"react-bootstrap\";\n\n// CONSTANTS FOR MATH\nconst e = 2.71828;\nconst D = 10;\nconst DIRECTIONS = [\n  \"right\",\n  \"left\",\n  \"down\",\n  \"up\",\n  \"diagonal-down-r\",\n  \"diagonal-down-l\",\n  \"diagonal-up-r\",\n  \"diagonal-up-l\"\n];\nconst DIRECTION_INDEXES = [\n  { name: \"right\", x: n => n + 1, y: n => n },\n  { name: \"left\", x: n => n - 1, y: n => n },\n  { name: \"down\", x: n => n, y: n => n + 1 },\n  { name: \"up\", x: n => n, y: n => n - 1 },\n  { name: \"diagonal-down-r\", x: n => n + 1, y: n => n + 1 },\n  { name: \"diagonal-down-l\", x: n => n - 1, y: n => n + 1 },\n  { name: \"diagonal-up-r\", x: n => n + 1, y: n => n - 1 },\n  { name: \"diagonal-up-l\", x: n => n - 1, y: n => n - 1 }\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      averageTimes: [],\n      bacteria: [],\n      baseRun: 3,\n      BER: [],\n      colors: [],\n      done: false,\n      error: \"\",\n      inputN: 20,\n      inputQ: 256,\n      payload: [\n        { goal: \"RX-red\", input: \"abcde\" },\n        { goal: \"RX-green\", input: \"lmnop\" },\n        { goal: \"RX-blue\", input: \"vwxyz\" }\n      ],\n      Q: 256,\n      releaseRate: 5,\n      results: [\n        { goal: \"RX-red\", output: \"\" },\n        { goal: \"RX-green\", output: \"\" },\n        { goal: \"RX-blue\", output: \"\" }\n      ],\n      RX: [],\n      squareSize: 20,\n      throughput: [],\n      time: 0,\n      TX: { x: 0, y: 0 },\n      forceReleaseOrder: true\n    };\n  }\n\n  componentDidMount() {\n    this.boardGen();\n  }\n\n  // MATH HELPERS\n  plugIn = (x, equation) => {\n    return eval(equation);\n  };\n\n  trapezoid = (length, h1, h2) => {\n    return ((h1 + h2) / 2) * length;\n  };\n\n  integrate = (a, b, equation, stepsize) => {\n    var area = 0;\n    for (var i = a * 1.0; i < b; i += stepsize) {\n      var h1 = this.plugIn(i, equation);\n      var h2 = this.plugIn(i + stepsize, equation);\n      area = area + this.trapezoid(stepsize, h1, h2);\n    }\n    return area;\n  };\n  // END MATH HELPERS\n\n  // BOARD GENERATION\n  boardGen = () => {\n    let colors = [];\n    let temp = [];\n    const n = this.state.squareSize * this.state.squareSize + 1;\n    const nSqr = this.state.squareSize;\n    let row = 0;\n\n    for (let i = 1; i < n; i++) {\n      if (row === 0 && i === 1) {\n        // TX\n        temp.push({\n          r: 0,\n          g: 0,\n          b: 0,\n          x: 0,\n          y: 0\n        });\n      } else if (row === 0 && i % nSqr === 0) {\n        temp.push({\n          r: 256,\n          g: 0,\n          b: 0,\n          x: nSqr - 1,\n          y: 0\n        });\n      } else if (row === nSqr - 1 && i % nSqr === 0) {\n        temp.push({\n          r: 0,\n          g: 256,\n          b: 0,\n          x: nSqr - 1,\n          y: nSqr - 1\n        });\n      } else if (row === nSqr - 1 && i % nSqr === 1) {\n        temp.push({\n          r: 0,\n          g: 0,\n          b: 256,\n          x: 0,\n          y: nSqr - 1\n        });\n      } else {\n        temp.push({\n          r: 0,\n          g: 0,\n          b: 0,\n          x: i % nSqr === 0 ? nSqr - 1 : (i % nSqr) - 1,\n          y: row\n        });\n      }\n\n      if (i % nSqr === 0 && i !== 0) {\n        colors.push(temp);\n        temp = [];\n        row += 1;\n      }\n    }\n    this.setState({\n      RX: [\n        { name: \"RX-blue\", x: 0, y: nSqr - 1 },\n        { name: \"RX-green\", x: nSqr - 1, y: nSqr - 1 },\n        { name: \"RX-red\", x: nSqr - 1, y: 0 }\n      ],\n      colors: colors\n    });\n  };\n\n  getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  // SET STATES FOR VAR CHANGES\n  changeN = n => {\n    var reg = new RegExp(\"^[0-9]+$\");\n    (reg.test(n) || n === \"\") && n < 31\n      ? this.setState({ inputN: n, error: \"\" })\n      : this.ERRORTEXT(\"Invalid N\");\n  };\n\n  changeQ = q => {\n    var reg = new RegExp(\"^[0-9]+$\");\n    reg.test(q) || q === \"\"\n      ? this.setState({ inputQ: q, error: \"\" })\n      : this.ERRORTEXT(\"Invalid Q\");\n  };\n\n  changeBaseRun = q => {\n    var reg = new RegExp(\"^[0-9]+$\");\n    reg.test(q) || q === \"\"\n      ? this.setState({ baseRun: q, error: \"\" })\n      : this.ERRORTEXT(\"Invalid Base Run\");\n  };\n\n  ERRORTEXT = text => {\n    this.setState({ error: text });\n  };\n\n  changeReleaseRate = text => {\n    text > 0 || text === \"\"\n      ? this.setState({ releaseRate: text, error: \"\" })\n      : this.ERRORTEXT(\"VALUE MUST BE GREATER THAN 0\");\n  };\n\n  setReleaseOrder = () =>\n    this.setState({ forceReleaseOrder: !this.state.forceReleaseOrder });\n\n  payloadChange = (rx, val) => {\n    const { payload } = this.state;\n    if (rx === \"RX-red\") {\n      payload[0].input = val;\n    } else if (rx === \"RX-green\") {\n      payload[1].input = val;\n    } else if (rx === \"RX-blue\") {\n      payload[2].input = val;\n    } else {\n      console.log(\"ERROR IN PAYLOAD CHANGE\");\n    }\n    this.setState({ payload: payload });\n  };\n  // STATE CHANGES END\n\n  // =========================== Board update ===========================\n\n  notTXorRX = (x, y) => {\n    let good = true;\n    this.state.RX.forEach(rec => {\n      if (rec.x === x && rec.y === y) {\n        good = false;\n      }\n    });\n    if (this.state.TX.x === x && this.state.TX.y === y) {\n      good = false;\n    }\n    return good;\n  };\n\n  setSquaresAtR = (colors, concen, r, Rx) => {\n    let x = 0; // COlUMN\n    let y = 0; // ROW\n    if (Rx.x === this.state.squareSize - 1 && Rx.y === 0) {\n      // Top Right\n      if (r >= this.state.squareSize) {\n        y = this.state.squareSize - 1;\n        x = (this.state.squareSize - 1) * 2 - r;\n      } else {\n        y = r;\n        x = this.state.squareSize - 1;\n      }\n      while (y >= 0 && x >= 0) {\n        if (this.notTXorRX(x, y)) {\n          colors[y][x].r =\n            colors[y][x].r + concen >= 256 ? 255 : colors[y][x].r + concen;\n        }\n        x -= 1;\n        y -= 1;\n      }\n    } else if (Rx.x === 0 && Rx.y === this.state.squareSize - 1) {\n      // Bottom left\n      if (r >= this.state.squareSize) {\n        y = (this.state.squareSize - 1) * 2 - r;\n        x = this.state.squareSize - 1;\n      } else {\n        y = this.state.squareSize - 1;\n        x = r;\n      }\n      while (x >= 0 && y >= 0) {\n        if (this.notTXorRX(x, y)) {\n          colors[y][x].b =\n            colors[y][x].b + concen >= 256 ? 255 : colors[y][x].b + concen;\n        }\n        x -= 1;\n        y -= 1;\n      }\n    } else if (\n      Rx.x === this.state.squareSize - 1 &&\n      Rx.y === this.state.squareSize - 1\n    ) {\n      // Bottom right\n      if (r >= this.state.squareSize) {\n        y = (this.state.squareSize - 1) * 2 - r;\n        x = 0;\n      } else {\n        y = this.state.squareSize - 1;\n        x = this.state.squareSize - r - 1;\n      }\n      while (x <= this.state.squareSize - 1 && y >= 0) {\n        if (this.notTXorRX(x, y)) {\n          colors[y][x].g =\n            colors[y][x].g + concen >= 256 ? 255 : colors[y][x].g + concen;\n        }\n        x += 1;\n        y -= 1;\n      }\n    }\n    return colors;\n  };\n\n  getDiffusedConcentration = (r, t) => {\n    return (\n      (this.state.Q / (2 * D * Math.PI * r)) *\n      (1 -\n        (2 / Math.sqrt(Math.PI)) *\n          this.integrate(\n            0,\n            (r / Math.sqrt(4 * D * t), e + \"**((-\" + t + \")**2)\")\n          ))\n    );\n  };\n\n  updateColors = () => {\n    let { colors } = this.state;\n    this.state.RX.forEach(rec => {\n      for (let i = 1; i < this.state.squareSize * 2 - 3; i++) {\n        let concen = this.getDiffusedConcentration(i, this.state.time);\n        colors = this.setSquaresAtR(colors, concen, i, rec);\n      }\n    });\n\n    this.setState({ colors, time: (this.state.time += 1) });\n  };\n\n  // =========================== END UPDATE BOARD ===========================\n  // =========================== Bacteria ===========================\n\n  createBacteria = () => {\n    const directions = [\"right\", \"down\", \"diagonal-down-r\"];\n    let released = false;\n    let i = 0;\n    let index = -1;\n    while (!released) {\n      if (index !== -1) {\n        index += 1;\n      } else if (this.state.forceReleaseOrder) {\n        index = this.state.bacteria.length % 3;\n      } else {\n        index = this.getRandomInt(3);\n      }\n      const color = this.state.payload[index].goal;\n      const activeBac = this.state.bacteria.filter(bac => bac.color === color);\n      if (activeBac.length < this.state.payload[index].input.length) {\n        const dirIndex = this.getRandomInt(3);\n        released = true;\n        return {\n          payload: this.state.payload[index].input[activeBac.length],\n          locationX: this.state.TX.x,\n          locationY: this.state.TX.y,\n          color: color,\n          start: this.state.time,\n          end: false,\n          state: \"run\",\n          direction: directions[dirIndex],\n          stateDuration: 0\n        };\n      }\n      i++;\n      if (i > 20) {\n        break;\n      }\n    }\n  };\n\n  checkNeighborBacteria = bac => {\n    const { colors } = this.state;\n    const x = bac.locationX;\n    const y = bac.locationY;\n    let neighbors = [];\n    for (let i = 0; i < colors.length; i++) {\n      const temp = colors[i].filter(\n        color =>\n          (color.x === x + 1 && color.y === y) ||\n          (color.x === x - 1 && color.y === y) ||\n          (color.x === x && color.y === y + 1) ||\n          (color.x === x && color.y === y - 1) ||\n          (color.x === x - 1 && color.y === y - 1) ||\n          (color.x === x + 1 && color.y === y - 1) ||\n          (color.x === x + 1 && color.y === y + 1) ||\n          (color.x === x - 1 && color.y === y + 1)\n      );\n      neighbors.push(...temp);\n    }\n    const randomMove = this.getRandomInt(neighbors.length);\n    let maxR = neighbors[randomMove];\n    let maxG = neighbors[randomMove];\n    let maxB = neighbors[randomMove];\n    for (let i = 0; i < neighbors.length; i++) {\n      maxR = neighbors[i].r > maxR.r ? neighbors[i] : maxR;\n      maxG = neighbors[i].g > maxG.g ? neighbors[i] : maxG;\n      maxB = neighbors[i].b > maxB.b ? neighbors[i] : maxB;\n    }\n    return [maxR, maxG, maxB];\n  };\n\n  HofT = concen => {\n    return this.state.time;\n  };\n\n  bacteriaStep = () => {\n    const { bacteria } = this.state;\n    const done = bacteria.find(b => !b.end);\n    const bacReleased = this.state.payload.reduce(function(acc, obj) {\n      return acc + obj.input.length;\n    }, 0);\n    if (!done && this.state.bacteria.length === bacReleased) {\n      this.bitERR();\n      this.avgTime();\n      this.lCSUB();\n      this.setState({ done: true });\n      return;\n    }\n    if (\n      this.state.bacteria.length < bacReleased &&\n      this.state.time % this.state.releaseRate === 0\n    ) {\n      bacteria.push(this.createBacteria());\n    }\n    const newBac = bacteria.map(bac => {\n      if (bac.end) {\n        return bac;\n      }\n      if (\n        bac.color === \"RX-red\" &&\n        bac.locationX === this.state.RX[2].x &&\n        bac.locationY === this.state.RX[2].y\n      ) {\n        const { results } = this.state;\n        results[0].output = this.state.results[0].output += bac.payload;\n        this.setState({ results });\n        return { ...bac, end: this.state.time };\n      } else if (\n        bac.color === \"RX-green\" &&\n        bac.locationX === this.state.RX[1].x &&\n        bac.locationY === this.state.RX[1].y\n      ) {\n        const { results } = this.state;\n        results[1].output = this.state.results[1].output += bac.payload;\n        this.setState({ results });\n        return { ...bac, end: this.state.time };\n      } else if (\n        bac.color === \"RX-blue\" &&\n        bac.locationX === this.state.RX[0].x &&\n        bac.locationY === this.state.RX[0].y\n      ) {\n        const { results } = this.state;\n        results[2].output = this.state.results[2].output += bac.payload;\n        this.setState({ results });\n        return { ...bac, end: this.state.time };\n        // END END CONDITIONS\n      } else {\n        if (bac.state === \"run\") {\n          if (bac.stateDuration > this.state.baseRun) {\n            return { ...bac, state: \"tumble\", stateDuration: 0 };\n          }\n          // MOVE THE BACTERIA TO NEXT SQUARE\n          const indexHelper = DIRECTION_INDEXES.find(\n            b => b.name === bac.direction\n          );\n          const newX = indexHelper.x(bac.locationX);\n          const newY = indexHelper.y(bac.locationY);\n          if (\n            newX < 0 ||\n            newX >= this.state.squareSize ||\n            newY < 0 ||\n            newY >= this.state.squareSize\n          ) {\n            return { ...bac, state: \"tumble\", stateDuration: 0 };\n          }\n          return {\n            ...bac,\n            stateDuration: bac.stateDuration + 1,\n            locationX: newX,\n            locationY: newY\n          };\n        } else if (bac.state === \"tumble\") {\n          const rgb = this.checkNeighborBacteria(bac);\n          if (this.getRandomInt(5) === 4 || bac.stateDuration > 5) {\n            if (bac.color === \"RX-red\") {\n              let newDirection = DIRECTION_INDEXES.find(\n                d =>\n                  d.x(bac.locationX) === rgb[0].x &&\n                  d.y(bac.locationY) === rgb[0].y\n              );\n              while (newDirection.name === bac.direction) {\n                newDirection =\n                  DIRECTION_INDEXES[\n                    this.getRandomInt(DIRECTION_INDEXES.length)\n                  ];\n              }\n              return {\n                ...bac,\n                direction: newDirection.name,\n                locationX: rgb[0].x,\n                locationY: rgb[0].y,\n                state: \"run\",\n                stateDuration: 0\n              };\n            } else if (bac.color === \"RX-green\") {\n              let newDirection = DIRECTION_INDEXES.find(\n                d =>\n                  d.x(bac.locationX) === rgb[1].x &&\n                  d.y(bac.locationY) === rgb[1].y\n              );\n              while (newDirection.name === bac.direction) {\n                newDirection =\n                  DIRECTION_INDEXES[\n                    this.getRandomInt(DIRECTION_INDEXES.length)\n                  ];\n              }\n              return {\n                ...bac,\n                direction: newDirection.name,\n                locationX: rgb[1].x,\n                locationY: rgb[1].y,\n                state: \"run\",\n                stateDuration: 0\n              };\n            } else if (bac.color === \"RX-blue\") {\n              let newDirection = DIRECTION_INDEXES.find(\n                d =>\n                  d.x(bac.locationX) === rgb[2].x &&\n                  d.y(bac.locationY) === rgb[2].y\n              );\n              while (newDirection.name === bac.direction) {\n                newDirection =\n                  DIRECTION_INDEXES[\n                    this.getRandomInt(DIRECTION_INDEXES.length)\n                  ];\n              }\n              return {\n                ...bac,\n                direction: newDirection.name,\n                locationX: rgb[2].x,\n                locationY: rgb[2].y,\n                state: \"run\",\n                stateDuration: 0\n              };\n            }\n          } else {\n            return { ...bac, stateDuration: bac.stateDuration + 1 };\n          }\n        } else {\n          return bac;\n        }\n      }\n    });\n\n    this.setState({ bacteria: newBac });\n  };\n\n  // =========================== RUN SIM ===========================\n  simIteration = () => {\n    this.updateColors();\n    this.bacteriaStep();\n  };\n\n  simRun = async () => {\n    while (!this.state.done) {\n      this.simIteration();\n      await this.sleep(1000);\n    }\n  };\n\n  sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  // Gen results\n  bitERR = () => {\n    const { payload, results } = this.state;\n    const inOut = [...payload, ...results];\n    let r = [];\n    for (let i = 0; i < payload.length; i++) {\n      let error = 0;\n      for (let j = 0; j < inOut[i].input.length; j++) {\n        if (inOut[i].input[j] !== inOut[i + 3].output[j]) {\n          error += 1;\n        }\n      }\n      r.push({ goal: inOut[i].goal, BER: error / inOut[i].input.length });\n    }\n    const temp = [r[0].BER, r[1].BER, r[2].BER];\n    console.log(temp.toString());\n    this.setState({ BER: r });\n  };\n\n  avgTime = () => {\n    const { bacteria } = this.state;\n    const r = bacteria.map(b => ({ ...b, time: b.end - b.start }));\n    const red = r.filter(b => b.color === \"RX-red\");\n    const redTotal = red.reduce(function(acc, obj) {\n      return acc + obj.time;\n    }, 0);\n    const green = r.filter(b => b.color === \"RX-green\");\n    const greenTotal = green.reduce(function(acc, obj) {\n      return acc + obj.time;\n    }, 0);\n    const blue = r.filter(b => b.color === \"RX-blue\");\n    const blueTotal = blue.reduce(function(acc, obj) {\n      return acc + obj.time;\n    }, 0);\n    console.log(\n      [\n        redTotal / red.length,\n        greenTotal / green.length,\n        blueTotal / blue.length\n      ].toString()\n    );\n    this.setState({\n      averageTimes: [\n        redTotal / red.length,\n        greenTotal / green.length,\n        blueTotal / blue.length\n      ]\n    });\n  };\n\n  lCSUB = () => {\n    const { payload, results } = this.state;\n    const r = [];\n    for (let i = 0; i < results.length; i++) {\n      let substrings = [];\n      for (let j = 0; j < results[i].output.length; j++) {\n        for (let k = j + 1; k < results[i].output.length + 1; k++) {\n          substrings.push(results[i].output.slice(j, k));\n        }\n      }\n      substrings.sort((a, b) => a.length - b.length);\n      for (let p = substrings.length - 1; p >= 0; p--) {\n        if (payload[i].input.includes(substrings[p])) {\n          r.push({ goal: payload[i].goal, throughput: substrings[p].length });\n          break;\n        }\n      }\n    }\n    const temp = [r[0].throughput, r[1].throughput, r[2].throughput];\n    console.log(temp.toString());\n    this.setState({ throughput: r });\n  };\n\n  render() {\n    return (\n      <div\n        style={{ display: \"flex\", flexDirection: \"row\", flex: 1 }}\n        className='App'\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flex: 0.35,\n            flexDirection: \"column\",\n            marginHorizontal: 15\n          }}\n        >\n          <p>{this.state.error}</p>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Red Payload</p>\n            <input\n              style={{\n                margin: 1,\n                borderColor: \"red\",\n                justifyContent: \"space-between\"\n              }}\n              type='text'\n              name='r-val'\n              placeholder='RX-red'\n              value={this.state.payload[0].input}\n              disabled={this.state.time > 0}\n              onChange={n => this.payloadChange(\"RX-red\", n.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Green Payload</p>\n            <input\n              style={{ margin: 1, borderColor: \"green\" }}\n              type='text'\n              name='g-val'\n              placeholder='RX-green'\n              value={this.state.payload[1].input}\n              disabled={this.state.time > 0}\n              onChange={q => this.payloadChange(\"RX-green\", q.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Blue Payload</p>\n            <input\n              style={{ margin: 1, borderColor: \"blue\" }}\n              type='text'\n              name='b-val'\n              placeholder='RX-blue'\n              value={this.state.payload[2].input}\n              disabled={this.state.time > 0}\n              onChange={n => this.payloadChange(\"RX-blue\", n.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Release Rate</p>\n            <input\n              style={{ margin: 1 }}\n              type='text'\n              name='releaseRate'\n              placeholder='enter a release rate'\n              value={this.state.releaseRate}\n              disabled={this.state.time > 0}\n              onChange={n => this.changeReleaseRate(n.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Base Run</p>\n            <input\n              style={{ margin: 1 }}\n              type='text'\n              name='basRun'\n              placeholder='enter a Base Run'\n              value={this.state.baseRun}\n              disabled={this.state.time > 0}\n              onChange={n => this.changeBaseRun(n.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Board size</p>\n            <input\n              style={{ margin: 1 }}\n              type='text'\n              name='n-value'\n              placeholder='enter a value for n'\n              value={this.state.inputN}\n              onChange={n => this.changeN(n.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <p>Q-value</p>\n            <input\n              style={{ margin: 1 }}\n              type='text'\n              name='q-value'\n              placeholder='enter a value for q'\n              value={this.state.inputQ}\n              onChange={q => this.changeQ(q.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            }}\n          >\n            <p style={{ textAlign: \"center\" }}>Require Round Robin Release:</p>\n            <input\n              type='checkbox'\n              disabled={this.state.time > 0}\n              style={{ border: 4, borderColor: \"green\" }}\n              checked={this.state.forceReleaseOrder}\n              onChange={() => this.setReleaseOrder()}\n            />\n          </div>\n          <Button\n            style={{ margin: 1 }}\n            onClick={() =>\n              this.setState(\n                {\n                  squareSize: this.state.inputN,\n                  Q: this.state.inputQ,\n                  time: 0\n                },\n                () =>\n                  this.setState(\n                    {\n                      colors: [],\n                      RX: [],\n                      time: 0,\n                      error: \"\",\n                      bacteria: [],\n                      results: [\n                        { goal: \"RX-red\", output: \"\" },\n                        { goal: \"RX-green\", output: \"\" },\n                        { goal: \"RX-blue\", output: \"\" }\n                      ],\n                      BER: [],\n                      done: false\n                    },\n                    () => this.boardGen()\n                  )\n              )\n            }\n          >\n            Update/Reset Channel\n          </Button>\n          <Button style={{ margin: 1 }} onClick={() => this.simIteration()}>\n            STEP\n          </Button>\n          <Button style={{ margin: 1 }} onClick={() => this.simRun()}>\n            Run Whole Simulation\n          </Button>\n          <p\n            style={{\n              color: this.state.payload[0].input.includes(\n                this.state.results[0].output\n              )\n                ? \"green\"\n                : \"red\"\n            }}\n          >\n            RX-red output: {this.state.results[0].output}\n          </p>\n          {this.state.done && <p>BER: {this.state.BER[0].BER}</p>}\n          {this.state.done && <p>Average Time: {this.state.averageTimes[0]}</p>}\n          {this.state.done && (\n            <p>Throughput: {this.state.throughput[0].throughput}</p>\n          )}\n          <p\n            style={{\n              color: this.state.payload[1].input.includes(\n                this.state.results[1].output\n              )\n                ? \"green\"\n                : \"red\"\n            }}\n          >\n            RX-green output: {this.state.results[1].output}\n          </p>\n          {this.state.done && <p>BER: {this.state.BER[1].BER}</p>}\n          {this.state.done && <p>Average Time: {this.state.averageTimes[1]}</p>}\n          {this.state.done && (\n            <p>Throughput: {this.state.throughput[1].throughput}</p>\n          )}\n          <p\n            style={{\n              color: this.state.payload[2].input.includes(\n                this.state.results[2].output\n              )\n                ? \"green\"\n                : \"red\"\n            }}\n          >\n            RX-blue output: {this.state.results[2].output}\n          </p>\n          {this.state.done && <p>BER: {this.state.BER[2].BER}</p>}\n          {this.state.done && <p>Average Time: {this.state.averageTimes[2]}</p>}\n          {this.state.done && (\n            <p>Throughput: {this.state.throughput[2].throughput}</p>\n          )}\n        </div>\n\n        <div\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flex: 1,\n            margin: 30\n          }}\n        >\n          {this.state.colors.map(color => (\n            <Row row={color} bacteria={this.state.bacteria} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}